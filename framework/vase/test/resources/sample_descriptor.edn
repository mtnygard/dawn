;; Idempotent Schema Datoms (norms)
;; --------------------------------
{:vase/norms
 {:example/base-schema
  ;; Supports full/long Datomic schemas
  {:vase.norm/txes [[{:db/id                 #db/id[:db.part/db]
                      :db/ident              :company/name
                      :db/unique             :db.unique/value
                      :db/valueType          :db.type/string
                      :db/cardinality        :db.cardinality/one
                      :db.install/_attribute :db.part/db}]]}
  ;; End :example/base-schema

  :example/user-schema
  ;; Also supports schema dependencies
  {:vase.norm/requires [:example/base-schema]
   ;; and supports short/basic schema definitions
   :vase.norm/txes     [#vase/schema-tx [[:user/userId :one :long :identity "A Users unique identifier"]
                                         [:user/userEmail :one :string :unique "The users email"]
                                         ;; :fulltext also implies :index
                                         [:user/userBio :one :string :fulltext "A short blurb about the user"]]]}
  :example/loan-schema
  {:vase.norm/requires [:example/base-schema :example/user-schema]
   :vase.norm/txes     [#vase/schema-tx [[:loanOffer/loanId :one :long :unique "The unique offer ID"]
                                         [:loanOffer/fees :one :long :index "All of the loan fees"]
                                         [:loanOffer/notes :many :string "Notes about the loan"]
                                         [:user/loanOffers :many :ref "The collection of loan offers"]]]}}

 ;; Global Specs for the API
 ;; ------------------------
 :vase/specs
 {:example.test/age    (fn [age] (> age 21))
  :example.test/name   (clojure.spec.alpha/and string? not-empty)
  :example.test/person (clojure.spec.alpha/keys :req-un [:example.test/name
                                                         :example.test/age])}

 ;; API Tags/Versions
 ;; ------------------
 :vase/apis
 {:example/v1
  {:vase.api/routes
   {"/hello"                {:get #vase/respond {:name :example.v1/simple-response
                                                 :body "Hello World"}}
    "/redirect-to-google"   {:get #vase/redirect {:name :example.v1/r-page
                                                  :url  "http://www.google.com"}}
    "/redirect-to-param"    {:get #vase/redirect {:name   :example.v1/ar-page
                                                  ;; POST bodies and query string args are bound in :params
                                                  :params [someurl]
                                                  :url    someurl}}
    "/capture-s/:url-thing" {:get #vase/respond {:name       :example.v1/url-param-example
                                                 ;; URL parameters are also bound in :params
                                                 :params     [url-thing]
                                                 :edn-coerce [url-thing] ;; parse a param as an edn string
                                                 :body       (str "You said: " url-thing " which is a " (type url-thing))}}
    ;; Validate (with clojure.spec.alpha) happens on the entire
    ;; `param` map
    "/validate"             {:post #vase/validate {:name :example.v1/validate-page
                                                   :spec :example.test/person}}
    ;; Just use datomic queries
    "/db"                   {:get #vase/query {:name   :example.v1/db-page
                                               :params []
                                               :query  [:find ?e ?v
                                                        :where [?e :db/ident ?v]]}}

    "/users" {:get #vase/query {:name   :example.v1/users-page
                                :params []
                                :query  [:find ?id ?email
                                         :where
                                         [?e :user/userId ?id]
                                         [?e :user/userEmail ?email]]}}

    "/users/:id" {:get #vase/query {:name       :example.v1/user-id-page
                                    :params     [id]
                                    :edn-coerce [id]
                                    :query      [:find ?e
                                                 :in $ ?id
                                                 :where
                                                 [?e :user/userId ?id]]}}

    "/user" {:get    #vase/query {:name   :example.v1/user-page
                                  :params [email]
                                  :query  [:find ?e
                                           :in $ ?email
                                           :where
                                           [?e :user/userEmail ?email]]}
             :post   #vase/transact {:name       :example.v1/user-create
                                     :properties [:db/id
                                                  :user/userId
                                                  :user/userEmail
                                                  :user/userBio]}
             :delete #vase/transact {:name       :example.v1/user-delete
                                     :db-op      :vase/retract-entity
                                     ;; :retract-entity requires :db/id to be supplied
                                     :properties [:db/id]}}

    "/fogus" {:get #vase/query {:name   :example.v1/fogus-page
                                :params []
                                :query  [:find ?e
                                         :in $
                                         :where
                                         [?e :user/userEmail "mefogus@gmail.com"]]}}

    "/fogus-and-paul"    {:get #vase/query {:name      :example.v1/foguspaul-page
                                            :params    []
                                            :constants [["mefogus@gmail.com" "paul.degrandis@gmail.com"]]
                                            :query     [:find ?e
                                                        :in $ [?emails ...]
                                                        :where
                                                        [?e :user/userEmail ?emails]]}}
    "/fogus-and-someone" {:get #vase/query {:name      :example.v1/fogussomeone-page
                                            :params    [someone]
                                            :constants ["mefogus@gmail.com"]
                                            :query     [:find ?e
                                                        :in $ ?someone ?fogus
                                                        :where
                                                        [(list ?someone ?fogus) [?emails ...]]
                                                        [?e :user/userEmail ?emails]]}}}
   :vase.api/schemas         [:example/user-schema :example/loan-schema]
   :vase.api/forward-headers ["vaserequest-id"]}

  :example/v2
  {:vase.api/interceptors [io.pedestal.http/transit-body]
   :vase.api/routes
   {"/hello"     {:get #vase/respond {:name           :example.v2/hello
                                      :enforce-format true
                                      :body           {:just-a-key "Another Hello World Route"}}}
    "/intercept" {:get [io.pedestal.http/json-body #vase/respond {:name           :example.v2/intercept
                                                                  :enforce-format true
                                                                  :body           {:one 1}}]}}}}}
